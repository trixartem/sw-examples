<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <link rel="stylesheet" href="/dump/index.css">
    <link rel="manifest" href="/dump/manifest.json">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>dump 2017</title>
</head>
<body>
<header>
    <a href="http://dump-conf.ru/"><img title="DUMP" src="/dump/images/dump.png" height="55"></a>
</header>
<!--<h1>fronttalks</h1>-->
<h2 class="section-header">fronttalks <br> Зал 1, 8 докладов</h2>
<p class="main__desc">Секция о Frontend-разработке совместно с сообществом FrontTalks.</p>
<section>
    <ul>
        <li class="lecture">
            <div class="lecture__time">10:00 – 10:40</div>
            <div class="lecture__photo">
                <img src="/dump/images/kuzvesov.jpg" width="80">
            </div>
            <div class="lecture__name">Документация REST API</div>
            <div class="lecture__speaker">Кузвесов Артём, Ideco</div>
            <div class="lecture__desc">
                <p>Часто возникает ситуация, когда нужна документация для API. Например, если вы работаете в
                    команде,
                    где роли backend и frontend разработчика исполняют разные люди. Или нужно дать доступ к API
                    сторонним разработчиком.<br></p>
                <p>Такая документация должна быть всегда актуальной и легкочитаемой. Как показывает практика,
                    хранение
                    её в google docs
                    <wbr>
                    /Markdown
                    <wbr>
                    /reStructuredText
                    <wbr>
                    /etc. неудобно и программисты часто забывают её
                    вовремя
                    актуализировать. Лучше всего, если документация API будет храниться максимально близко к
                    коду.
                </p>
                <p>В докладе:</p>
                <ul>
                    <li>расскажу про REST API;</li>
                    <li>сравню готовые решения для документации API;</li>
                    <li>расскажу про swagger, как с его помощью делать документацию для API в отдельных файлах или
                        же
                        генерировать сразу из кода;
                    </li>
                    <li>как можно сразу проверить и протестировать свою документацию;</li>
                    <li>как красиво её отобразить;</li>
                    <li>что делать, если какие-то методы в коде устаревшие и хочется как-то указать на это в
                        документации;
                    </li>
                    <li>как с помощью swagger по описанию документации сгенерировать код самого API для разных
                        языков
                        (Python/
                        <wbr>
                        NodeJs/
                        <wbr>
                        PHP/
                        <wbr>
                        Ruby/
                        <wbr>
                        etc.).
                    </li>
                </ul>
            </div>
        </li>
        <li class="lecture">
            <div class="lecture__time">10:50 – 11:30</div>
            <div class="lecture__photo">
                <img src="/dump/images/grinenko_In2xnde.jpg" width="80">
            </div>
            <div class="lecture__name"> Зависимости в компонентном вебе, приготовленные правильно
            </div>
            <div class="lecture__speaker">Гриненко Владимир, Яндекс, Симферополь</div>
            <div class="lecture__desc">
                <p>Мы живем в мире, построенном на компонентах. Сложные компоненты строятся на основе простых. Нам
                    приходится следить за зависимостями между ними.</p>
                <p>Однако большинство существующих решений имеют недостатки: хардкод, сложности при рефакторинге, много
                    ручной работы и так далее.</p>
                <p>Давайте пофантазируем на тему решения этих проблем и попробуем получить дополнительные преимущества
                    от отказа от привычной схемы с явными импортами. А может быть, найдутся и готовые, проверенные в бою
                    решения, которые нам подойдут?</p>
            </div>
        </li>
        <li class="lecture">
            <div class="lecture__time">12:00 – 12:40</div>
            <div class="lecture__photo">
                <img src="/dump/images/lyzlov.jpg" width="80">
            </div>
            <div class="lecture__name">КАК МЫ В ТОЧКЕ ПЕРЕЕЗЖАЕМ...</div>
            <div class="lecture__speaker">Лызлов Ярослав, Банк Точка, Екатеринбург</div>
            <div class="lecture__desc"><p>Мир фронтенд-разработки — пожалуй, самый быстрый в IT по динамике развития.
                Каждый год появляются новые фреймворки, а о старых все забывают. У каждого из них есть свои преимущества
                и недостатки. Нашему проекту уже несколько лет, и начинали мы его на AngularJS 1.2. С выходом новых
                версий фреймворка мы актуализировали наше приложение. Но чем больше и сложнее становился проект, тем
                чаще нам приходилось решать проблему производительности.</p>
            </div>
        </li>
        <li class="lecture">
            <div class="lecture__time">12:50 – 13:30</div>
            <div class="lecture__photo">
                <img src="/dump/images/duletski.jpg" width="80">
            </div>
            <div class="lecture__name">VUE.JS КАК РЕАКТ С ЧЕЛОВЕЧЕСКИМ ЛИЦОМ</div>
            <div class="lecture__speaker">Дулецкий Вольдэмар, Evrone, Калининград</div>
            <div class="lecture__desc"><p>Многие называют Vue.js смесью React и Angular 1. В докладе я расскажу, почему
                стоит начать изучать Vue, если вы до этого писали на jQuery, и в чем основные преимущества и недостатки
                перед React.</p>
            </div>
        </li>
        <li class="lecture">
            <div class="lecture__time">14:30 – 15:10</div>
            <div class="lecture__photo">
                <img src="/dump/images/prokopov.jpg" width="80">
            </div>
            <div class="lecture__name">КЛИЕНТУ И СЕРВЕРУ НУЖНО ПОГОВОРИТЬ</div>
            <div class="lecture__speaker">Прокопов Никита, Cognician, Новосибирск</div>
            <div class="lecture__desc"><p>Любое веб-приложение шлёт и получает данные с сервера. Это общение — сложная
                многомерная проблема с большим количеством условий, требований, компромиссов. Красота запрос-ответной

                Более современная версия — server push, SSE, веб-сокеты — лучше, но всё еще на очень низком уровне
                абстракции. Это биты и байты, ассемблер распределенных систем. Однако давно хочется делать это и проще,
                и надежнее, и качественно лучше. </p>
                <p>В этом докладе мы поднимемся на следующий уровень абстракции и посмотрим, как можно делать
                    клиент-серверную коммуникацию нового поколения: расширенные модели данных, высокоуровневые API, логи
                    событий и т.д. Мы рассмотрим сложные сценарии, проблемы, как их можно решать и какие для этого есть
                    инструменты. Ключевые слова: event sourcing, операционные трансформации, CRDT, Meteor, Apollo,
                    PouchDB, Firebase, Relay, Swarm.js, Logux.<br></p>
            </div>
        </li>
        <li class="lecture">
            <div class="lecture__time">15:20 – 16:00</div>
            <div class="lecture__photo">
                <img src="/dump/images/alekseenko.jpg" width="80">
            </div>
            <div class="lecture__name">КОШЕЛЁК ИЛИ ДЕНЬГИ: СЛОЖНЫЙ ВЫБОР МЕЖДУ ПАМЯТЬЮ И ПРОЦЕССОРОМ</div>
            <div class="lecture__speaker">Алексеенко Игорь, Академия HTML, Санкт-Перербург</div>
            <div class="lecture__desc"><p>Любое веб-приложение шлёт и получает данные с сервера. Это общение — сложная
                многомерная проблема с большим количеством условий, требований, компромиссов. Красота запрос-ответной
                модели в её простоте, но и только: сделать корректную и устойчивую передачу данных очень-очень сложно.
                Более современная версия — server push, SSE, веб-сокеты — лучше, но всё еще на очень низком уровне
                абстракции. Это биты и байты, ассемблер распределенных систем. Однако давно хочется делать это и проще,
                и надежнее, и качественно лучше. </p>
                <p>В этом докладе мы поднимемся на следующий уровень абстракции и посмотрим, как можно делать
                    клиент-серверную коммуникацию нового поколения: расширенные модели данных, высокоуровневые API, логи
                    событий и т.д. Мы рассмотрим сложные сценарии, проблемы, как их можно решать и какие для этого есть
                    инструменты. Ключевые слова: event sourcing, операционные трансформации, CRDT, Meteor, Apollo,
                    PouchDB, Firebase, Relay, Swarm.js, Logux.<br></p></div>
        </li>
        <li class="lecture">
            <div class="lecture__time">16:30 – 17:10</div>
            <div class="lecture__photo">
                <img src="/dump/images/petrov.jpg" width="80">
            </div>
            <div class="lecture__name">ПОРТИРОВАНИЕ WEB SDK C JS НА&nbsp;TS</div>
            <div class="lecture__speaker">Петров Григорий, Voximplant, Москва</div>
            <div class="lecture__desc"><p>Многие С++, Java и C# разработчики тепло встретили появление TypeScript, — и
                это был лишь вопрос времени, чтобы многие Web SDK были полностью переписаны на TypeScript. В своем
                докладе я сделаю фокус на сложностях, с которыми можно столкнуться во время портирования, и на
                ожиданиях, которые могут оправдаться или не оправдаться от подобной смены стека технологий.</p>
                <ul>
                    <li>Зачем переписывать существующие проекты на TypeScript?</li>
                    <li>Совместимость с vanilla JS кодом: API, стектрейсы, разное.</li>
                    <li>Размер и скорость работы.</li>
                    <li>Grunt, Gulp или Webpack? Может быть, Rollup?</li>
                    <li>Стоят ли типы того?</li>
                    <li>Цена разработки.</li>
                </ul>
            </div>
        </li>
        <li class="lecture">
            <div class="lecture__time">17:20 – 18:00</div>
            <div class="lecture__photo">
                <img src="/dump/images/kuvaldin.jpg" width="80">
            </div>
            <div class="lecture__name">ЖИЗНЬ БЕЗ ИНТЕРНЕТА</div>
            <div class="lecture__speaker">Кувалдин Артём, Яндекс, Екатеринбург</div>
            <div class="lecture__desc"><p>Сейчас интернет всегда лежит с собой в кармане. Создаётся ощущение, что мы
                достигли точки, когда интернет есть везде, но это не так. До сих пор, даже в огромном мегаполисе, можно
                найти кучу мест, где интернета нет: вы спускаетесь в метро — интернета нет, вы пришли в модный клуб —
                интернета нет, вы на 50-м этаже Высоцкого — интернета нет, вы на конференции с более чем тысячей
                участников...</p>
                <p>Я расскажу вам о том, как с помощью технологии Service Workers сделать любую веб-страницу доступной
                    без интернета, а также покажу, где мы в Яндексе уже используем эту технологию.</p>
            </div>
        </li>
    </ul>
</section>
<hr>

<section>
    <h2>Ведущие секции</h2>
    <ul>
        <li class="person">
            <div class="person__photo">
                <img src="/dump/images/ivanov.jpg" width="80">
            </div>
            <div class="person__name">Алексей Иванов,</div>
            <div class="person__info">Evil Martians</div>
        </li>
        <li class="person">
            <div class="person__photo">
                <img src="/dump/images/makishvili.jpg" width="80">
            </div>
            <div class="person__name">Вадим Макишвили,</div>
            <div class="person__info">Яндекс</div>
        </li>
        <li class="person">
            <div class="person__photo">
                <img src="/dump/images/mohov.jpg" width="80">
            </div>
            <div class="person__name">Олег Мохов,</div>
            <div class="person__info">Яндекс</div>
        </li>
    </ul>
</section>
<section>
    <h2 class="sponsor">Спонсор секции</h2>
    <img title="Яндекс" class="yandex-logo" alt="" src="/dump/images/yandex_logo.svg">
</section>
<script src="/dump/index.js"></script>
</body>
</html>
